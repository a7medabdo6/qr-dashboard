{"version":3,"sources":["views/ProductManagementList/ProductCreate/components/AboutAuthor/AboutAuthor.js","views/ProductManagementList/ProductCreate/components/AboutProject/AboutProject.js","views/ProductManagementList/ProductCreate/components/Header/Header.js","views/ProductManagementList/ProductCreate/components/Preferences/Preferences.js","views/ProductManagementList/ProductCreate/components/ProjectCover/ProjectCover.js","views/ProductManagementList/ProductCreate/components/ProjectDetails/ProjectDetails.js","views/ProductManagementList/ProductCreate/components/General/components/ProfileDetails/ProfileDetails.js","views/ProductManagementList/ProductCreate/components/General/components/SuccessSnackbar/SuccessSnackbar.js","views/ProductManagementList/ProductCreate/components/General/components/GeneralSettings/GeneralSettings.js","views/ProductManagementList/ProductCreate/components/General/General.js","views/ProductManagementList/ProductCreate/components/Modifiers/components/ProfileDetails/ProfileDetails.js","views/ProductManagementList/ProductCreate/components/Modifiers/components/SuccessSnackbar/SuccessSnackbar.js","views/ProductManagementList/ProductCreate/components/Modifiers/components/GeneralSettings/GeneralSettings.js","views/ProductManagementList/ProductCreate/components/Modifiers/Modifiers.js","views/ProductManagementList/ProductCreate/Tabs.js","views/ProductManagementList/ProductCreate/ProjectCreate.js"],"names":["makeStyles","theme","root","option","border","palette","divider","display","alignItems","padding","spacing","maxWidth","marginTop","selectedOption","backgroundColor","colors","grey","optionRadio","margin","optionDetails","marginLeft","alert","marginBottom","formGroup","fieldGroup","fieldHint","tags","flexGrow","dateField","useStyles","Header","props","className","rest","classes","clsx","Typography","component","gutterBottom","variant","style","marginBlock","options","flexDirection","content","textAlgin","name","avatar","height","width","removeBotton","ProfileDetails","profile","Card","CardContent","Avatar","src","firstName","lastName","color","CardActions","Button","green","message","icon","marginRight","SuccessSnackbar","open","onClose","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","SnackbarContent","defaultProps","saveButton","white","GeneralSettings","values","setValues","useState","openSnackbar","setOpenSnackbar","handleChange","event","persist","target","type","checked","value","onSubmit","preventDefault","CardHeader","title","Divider","Grid","container","item","md","xs","TextField","fullWidth","helperText","label","onChange","required","English_Name","Arabic_Name","English_Description","Arabic_Description","select","SelectProps","native","Category","map","state","key","English_Note","Arabic_Note","General","setProfile","useEffect","mounted","axios","get","then","response","data","lg","xl","english_Name","arabic_Name","price","addMoreRows","setaddMoreRows","addMoreRowsNutritional","setaddMoreRowsNutritional","addMoreRowsIngredients","setaddMoreRowsIngredients","Switch","edge","onClick","length","prev","TabPanel","children","index","other","role","hidden","id","aria-labelledby","Box","p","a11yProps","background","paper","SimpleTabs","React","setValue","AppBar","position","Tabs","newValue","aria-label","Tab","Modifiers","breakpoints","aboutAuthor","aboutProject","projectCover","projectDetails","preferences","actions","ProjectCreate","isPublic","canHire"],"mappings":"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","file":"static/js/34.00d99ec2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Typography,\n  Radio,\n  colors\n} from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  option: {\n    border: `1px solid ${theme.palette.divider}`,\n    display: 'flex',\n    alignItems: 'flex-start',\n    padding: theme.spacing(2),\n    maxWidth: 560,\n    '& + &': {\n      marginTop: theme.spacing(2)\n    }\n  },\n  selectedOption: {\n    backgroundColor: colors.grey[50]\n  },\n  optionRadio: {\n    margin: -10\n  },\n  optionDetails: {\n    marginLeft: theme.spacing(2)\n  }\n}));\n\nconst AboutAuthor = props => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n\n  const [selected, setSelected] = useState('freelancer');\n\n  const handleChange = (event, option) => {\n    setSelected(option.value);\n  };\n\n  const options = [\n    {\n      value: 'freelancer',\n      title: 'I\\'m a freelancer',\n      description: 'I\\'m looking for teamates to join in a personal project'\n    },\n    {\n      value: 'projectOwner',\n      title: 'I’m a project owner',\n      description:\n        'I\\'m looking for freelancer or contractors to take care of my project'\n    },\n    {\n      value: 'affiliate',\n      title: 'I want to join affiliate',\n      description:\n        'I\\'m looking for freelancer or contractors to take care of my project'\n    }\n  ];\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader title=\"Who are you exactly?\" />\n      <CardContent>\n        {options.map(option => (\n          <div\n            className={clsx(classes.option, {\n              [classes.selectedOption]: selected === option.value\n            })}\n            key={option.value}\n          >\n            <Radio\n              checked={selected === option.value}\n              className={classes.optionRadio}\n              color=\"primary\"\n              onClick={event => handleChange(event, option)}\n            />\n            <div className={classes.optionDetails}>\n              <Typography\n                gutterBottom\n                variant=\"h5\"\n              >\n                {option.title}\n              </Typography>\n              <Typography variant=\"body1\">{option.description}</Typography>\n            </div>\n          </div>\n        ))}\n      </CardContent>\n    </Card>\n  );\n};\n\nAboutAuthor.propTypes = {\n  className: PropTypes.string\n};\n\nexport default AboutAuthor;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  TextField,\n  Button,\n  Chip,\n  Typography\n} from '@material-ui/core';\nimport { DatePicker } from '@material-ui/pickers';\nimport AddIcon from '@material-ui/icons/Add';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport { Alert } from 'components';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  alert: {\n    marginBottom: theme.spacing(3)\n  },\n  formGroup: {\n    marginBottom: theme.spacing(3)\n  },\n  fieldGroup: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  fieldHint: {\n    margin: theme.spacing(1, 0)\n  },\n  tags: {\n    marginTop: theme.spacing(1),\n    '& > * + *': {\n      marginLeft: theme.spacing(1)\n    }\n  },\n  flexGrow: {\n    flexGrow: 1\n  },\n  dateField: {\n    '& + &': {\n      marginLeft: theme.spacing(2)\n    }\n  }\n}));\n\nconst AboutProject = props => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n\n  const initialValues = {\n    name: '',\n    tag: '',\n    tags: ['Full-Time', 'ReactJS'],\n    startDate: moment(),\n    endDate: moment().add(1, 'day')\n  };\n\n  const [values, setValues] = useState({ ...initialValues });\n  const [calendarTrigger, setCalendarTrigger] = useState(null);\n\n  const handleFieldChange = (event, field, value) => {\n    event.persist && event.persist();\n    setValues(values => ({\n      ...values,\n      [field]: value\n    }));\n  };\n\n  const handleTagAdd = () => {\n    setValues(values => {\n      const newValues = { ...values };\n\n      if (newValues.tag && !newValues.tags.includes(newValues.tag)) {\n        newValues.tags = [...newValues.tags];\n        newValues.tags.push(newValues.tag);\n      }\n\n      newValues.tag = '';\n\n      return newValues;\n    });\n  };\n\n  const handleTagDelete = tag => {\n    setValues(values => {\n      const newValues = { ...values };\n\n      newValues.tags = newValues.tags.filter(t => t !== tag);\n\n      return newValues;\n    });\n  };\n\n  const handleCalendarOpen = trigger => {\n    setCalendarTrigger(trigger);\n  };\n\n  const handleCalendarChange = () => {};\n\n  const handleCalendarAccept = date => {\n    setValues(values => ({\n      ...values,\n      [calendarTrigger]: date\n    }));\n  };\n\n  const handleCalendarClose = () => {\n    setCalendarTrigger(false);\n  };\n\n  const calendarOpen = Boolean(calendarTrigger);\n  const calendarMinDate =\n    calendarTrigger === 'startDate'\n      ? moment()\n      : moment(values.startDate).add(1, 'day');\n  const calendarValue = values[calendarTrigger];\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader title=\"About this project\" />\n      <CardContent>\n        <form>\n          <Alert\n            className={classes.alert}\n            message=\"Once you choose the project name you can’t change it unless you contact customer support.\"\n          />\n          <div className={classes.formGroup}>\n            <TextField\n              fullWidth\n              label=\"Project Name\"\n              name=\"name\"\n              onChange={event =>\n                handleFieldChange(event, 'name', event.target.value)\n              }\n              value={values.name}\n              variant=\"outlined\"\n            />\n          </div>\n          <div className={classes.formGroup}>\n            <div className={classes.fieldGroup}>\n              <TextField\n                className={classes.flexGrow}\n                label=\"Project Tags\"\n                name=\"tag\"\n                onChange={event =>\n                  handleFieldChange(event, 'tag', event.target.value)\n                }\n                value={values.tag}\n                variant=\"outlined\"\n              />\n              <Button\n                className={classes.addButton}\n                onClick={handleTagAdd}\n                size=\"small\"\n              >\n                <AddIcon className={classes.addIcon} />\n                Add\n              </Button>\n            </div>\n            <Typography\n              className={classes.fieldHint}\n              variant=\"body2\"\n            >\n              Tags will be colored depending the technology if the system\n              recognises.\n            </Typography>\n            <div className={classes.tags}>\n              {values.tags.map(tag => (\n                <Chip\n                  deleteIcon={<CloseIcon />}\n                  key={tag}\n                  label={tag}\n                  onDelete={() => handleTagDelete(tag)}\n                />\n              ))}\n            </div>\n          </div>\n          <div className={classes.formGroup}>\n            <div className={classes.fieldGroup}>\n              <TextField\n                className={classes.dateField}\n                label=\"Start Date\"\n                name=\"startDate\"\n                onClick={() => handleCalendarOpen('startDate')}\n                value={moment(values.startDate).format('DD/MM/YYYY')}\n                variant=\"outlined\"\n              />\n              <TextField\n                className={classes.dateField}\n                label=\"End Date\"\n                name=\"endDate\"\n                onClick={() => handleCalendarOpen('endDate')}\n                value={moment(values.endDate).format('DD/MM/YYYY')}\n                variant=\"outlined\"\n              />\n            </div>\n          </div>\n        </form>\n      </CardContent>\n      <DatePicker\n        minDate={calendarMinDate}\n        onAccept={handleCalendarAccept}\n        onChange={handleCalendarChange}\n        onClose={handleCalendarClose}\n        open={calendarOpen}\n        style={{ display: 'none' }} // Temporal fix to hide the input element\n        value={calendarValue}\n        variant=\"dialog\"\n      />\n    </Card>\n  );\n};\n\nAboutProject.propTypes = {\n  className: PropTypes.string\n};\n\nexport default AboutProject;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { Typography } from '@material-ui/core';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst Header = props => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n\n  return (\n    <div {...rest} className={clsx(classes.root, className)}>\n      <Typography component=\"h2\" gutterBottom variant=\"overline\"></Typography>\n      <Typography component=\"h1\" style={{ marginBlock: '20PX' }} variant=\"h3\">\n        Create Product\n      </Typography>\n    </div>\n  );\n};\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Typography,\n  FormControlLabel,\n  Checkbox\n} from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  options: {\n    marginTop: theme.spacing(2),\n    display: 'flex',\n    flexDirection: 'column'\n  }\n}));\n\nconst Preferences = props => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader title=\"Preferences\" />\n      <CardContent>\n        <Typography\n          gutterBottom\n          variant=\"h6\"\n        >\n          Privacy\n        </Typography>\n        <Typography variant=\"body2\">\n          You will recieve emails in your business email address\n        </Typography>\n        <div className={classes.options}>\n          <FormControlLabel\n            control={\n              <Checkbox\n                color=\"primary\"\n                defaultChecked //\n              />\n            }\n            label=\"Allow teamates invite others\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                color=\"primary\"\n                defaultChecked //\n              />\n            }\n            label=\"Private Project\"\n          />\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nPreferences.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Preferences;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { Card, CardHeader, CardContent } from '@material-ui/core';\n\nimport { FilesDropzone } from 'components';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst ProjectCover = props => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader title=\"Project cover\" />\n      <CardContent>\n        <FilesDropzone />\n      </CardContent>\n    </Card>\n  );\n};\n\nProjectCover.propTypes = {\n  className: PropTypes.string\n};\n\nexport default ProjectCover;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { Card, CardHeader, CardContent } from '@material-ui/core';\n\nimport { RichEditor } from 'components';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst ProjectDetails = props => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader title=\"Project details\" />\n      <CardContent>\n        <RichEditor placeholder=\"Say something about the product...\" />\n      </CardContent>\n    </Card>\n  );\n};\n\nProjectDetails.propTypes = {\n  className: PropTypes.string\n};\n\nexport default ProjectDetails;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Card,\n  CardContent,\n  CardActions,\n  Avatar,\n  Typography,\n  Button\n} from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  content: {\n    display: 'flex',\n    alignItems: 'center',\n    flexDirection: 'column',\n    textAlgin: 'center'\n  },\n  name: {\n    marginTop: theme.spacing(1)\n  },\n  avatar: {\n    height: 100,\n    width: 100\n  },\n  removeBotton: {\n    width: '100%'\n  }\n}));\n\nconst ProfileDetails = props => {\n  const { profile, className, ...rest } = props;\n\n  const classes = useStyles();\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardContent className={classes.content}>\n        <Avatar\n          className={classes.avatar}\n          src={\"https://mui.com/static/images/cards/paella.jpg\"}\n        />\n        <Typography\n          className={classes.name}\n          gutterBottom\n          variant=\"h3\"\n        >\n          {profile.firstName} {profile.lastName}\n        </Typography>\n        <Typography\n          color=\"textSecondary\"\n          variant=\"body1\"\n          component={'span'}\n        >\n          {/* {profile.state}, {profile.country} */}\n        </Typography>\n        <Typography\n          color=\"textSecondary\"\n          variant=\"body2\"\n          component={'span'}\n        >\n          {/* {profile.timezone} */}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button\n          className={classes.removeBotton}\n          variant=\"text\"\n        >\n          upload picture\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n\nProfileDetails.propTypes = {\n  className: PropTypes.string,\n  profile: PropTypes.object.isRequired\n};\n\nexport default ProfileDetails;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/styles';\nimport { Snackbar, SnackbarContent, colors } from '@material-ui/core';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircleOutlined';\n\nconst useStyles = makeStyles(theme => ({\n  content: {\n    backgroundColor: colors.green[600]\n  },\n  message: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  icon: {\n    marginRight: theme.spacing(2)\n  }\n}));\n\nconst SuccessSnackbar = props => {\n  const { open, onClose } = props;\n\n  const classes = useStyles();\n\n  return (\n    <Snackbar\n      anchorOrigin={{\n        vertical: 'top',\n        horizontal: 'center'\n      }}\n      autoHideDuration={6000}\n      onClose={onClose}\n      open={open}\n    >\n      <SnackbarContent\n        className={classes.content}\n        message={\n          <span className={classes.message}>\n            <CheckCircleIcon className={classes.icon} />\n            Successfully saved changes!\n          </span>\n        }\n        variant=\"h6\"\n      />\n    </Snackbar>\n  );\n};\n\nSuccessSnackbar.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired\n};\n\nSuccessSnackbar.defaultProps = {\n  open: true,\n  onClose: () => {}\n};\n\nexport default SuccessSnackbar;\n","import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  Grid,\n  Divider,\n  Switch,\n  TextField,\n  Typography,\n  colors\n} from '@material-ui/core';\n\nimport SuccessSnackbar from '../SuccessSnackbar';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  saveButton: {\n    color: theme.palette.white,\n    backgroundColor: colors.green[600],\n    '&:hover': {\n      backgroundColor: colors.green[900]\n    }\n  }\n}));\n\nconst GeneralSettings = props => {\n  const { values, setValues, profile, className, ...rest } = props;\n\n  const classes = useStyles();\n  const [openSnackbar, setOpenSnackbar] = useState(false);\n\n  const handleChange = event => {\n    event.persist();\n\n    setValues({\n      ...values,\n      [event.target.name]:\n        event.target.type === 'checkbox'\n          ? event.target.checked\n          : event.target.value\n    });\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setOpenSnackbar(true);\n  };\n\n  const handleSnackbarClose = () => {\n    setOpenSnackbar(false);\n  };\n\n  const states = ['Alabama', 'New York', 'San Francisco'];\n\n  return (\n    <Card {...rest} className={clsx(classes.root, className)}>\n      <form onSubmit={handleSubmit}>\n        <CardHeader title=\"Profile\" />\n        <Divider />\n        <CardContent>\n          <Grid container spacing={4}>\n            <Grid item md={6} xs={12}>\n              <TextField\n                fullWidth\n                helperText=\"Please specify the first name\"\n                label=\"English Name\"\n                name=\"firstName\"\n                onChange={handleChange}\n                required\n                value={values?.English_Name}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item md={6} xs={12}>\n              <TextField\n                fullWidth\n                label=\"Arabic Name\"\n                name=\"lastName\"\n                onChange={handleChange}\n                required\n                value={values?.Arabic_Name}\n                variant=\"outlined\"\n              />\n            </Grid>\n\n            <Grid item md={6} xs={12}>\n              <TextField\n                fullWidth\n                label=\" English Description\"\n                name=\"phone\"\n                onChange={handleChange}\n                type=\"text\"\n                value={values?.English_Description}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item md={6} xs={12}>\n              <TextField\n                fullWidth\n                label=\" Arabic Description\"\n                name=\"phone\"\n                onChange={handleChange}\n                type=\"text\"\n                value={values?.Arabic_Description}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item md={6} xs={12}>\n              <TextField\n                fullWidth\n                label=\" Category\"\n                name=\"state\"\n                onChange={handleChange}\n                select\n                // eslint-disable-next-line react/jsx-sort-props\n                SelectProps={{ native: true }}\n                value={values?.Category}\n                variant=\"outlined\">\n                {states.map(state => (\n                  <option key={state} value={state}>\n                    {state}\n                  </option>\n                ))}\n              </TextField>\n            </Grid>\n            <Grid item md={6} xs={12}>\n              <TextField\n                fullWidth\n                label=\"English Note\"\n                name=\"country\"\n                onChange={handleChange}\n                required\n                value={values?.English_Note}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item md={6} xs={12}>\n              <TextField\n                fullWidth\n                label=\"Arabic Note\"\n                name=\"country\"\n                onChange={handleChange}\n                required\n                value={values?.Arabic_Note}\n                variant=\"outlined\"\n              />\n            </Grid>\n          </Grid>\n        </CardContent>\n        <Divider />\n        <CardActions>\n          <Button\n            className={classes.saveButton}\n            type=\"submit\"\n            variant=\"contained\">\n            Next\n          </Button>\n        </CardActions>\n      </form>\n      <SuccessSnackbar onClose={handleSnackbarClose} open={openSnackbar} />\n    </Card>\n  );\n};\n\nGeneralSettings.propTypes = {\n  className: PropTypes.string,\n  profile: PropTypes.object.isRequired\n};\n\nexport default GeneralSettings;\n","import React, { useState, useEffect } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/styles';\nimport { Grid } from '@material-ui/core';\n\nimport axios from 'utils/axios';\nimport { ProfileDetails, GeneralSettings } from './components';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst General = props => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n  const [profile, setProfile] = useState(null);\n\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchProfile = () => {\n      axios.get('/api/account/profile').then(response => {\n        if (mounted) {\n          setProfile(response.data.profile);\n        }\n      });\n    };\n\n    fetchProfile();\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  if (!profile) {\n    return null;\n  }\n\n  return (\n    <Grid\n      {...rest}\n      className={clsx(classes.root, className)}\n      container\n      spacing={3}>\n      <Grid item lg={4} md={6} xl={3} xs={12}>\n        <ProfileDetails profile={profile} />\n      </Grid>\n      <Grid item lg={8} md={6} xl={9} xs={12}>\n        <GeneralSettings profile={profile} />\n      </Grid>\n    </Grid>\n  );\n};\n\nGeneral.propTypes = {\n  className: PropTypes.string\n};\n\nexport default General;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Card,\n  CardContent,\n  CardActions,\n  Avatar,\n  Typography,\n  Button\n} from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  content: {\n    display: 'flex',\n    alignItems: 'center',\n    flexDirection: 'column',\n    textAlgin: 'center'\n  },\n  name: {\n    marginTop: theme.spacing(1)\n  },\n  avatar: {\n    height: 100,\n    width: 100\n  },\n  removeBotton: {\n    width: '100%'\n  }\n}));\n\nconst ProfileDetails = props => {\n  const { profile, className, ...rest } = props;\n\n  const classes = useStyles();\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardContent className={classes.content}>\n        <Avatar\n          className={classes.avatar}\n          src={\"https://mui.com/static/images/cards/paella.jpg\"}\n        />\n        <Typography\n          className={classes.name}\n          gutterBottom\n          variant=\"h3\"\n        >\n          {profile.firstName} {profile.lastName}\n        </Typography>\n        <Typography\n          color=\"textSecondary\"\n          variant=\"body1\"\n        >\n          {/* {profile.state}, {profile.country} */}\n        </Typography>\n        <Typography\n          color=\"textSecondary\"\n          variant=\"body2\"\n        >\n          {/* {profile.timezone} */}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button\n          className={classes.removeBotton}\n          variant=\"text\"\n        >\n          upload picture\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n\nProfileDetails.propTypes = {\n  className: PropTypes.string,\n  profile: PropTypes.object.isRequired\n};\n\nexport default ProfileDetails;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/styles';\nimport { Snackbar, SnackbarContent, colors } from '@material-ui/core';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircleOutlined';\n\nconst useStyles = makeStyles(theme => ({\n  content: {\n    backgroundColor: colors.green[600]\n  },\n  message: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  icon: {\n    marginRight: theme.spacing(2)\n  }\n}));\n\nconst SuccessSnackbar = props => {\n  const { open, onClose } = props;\n\n  const classes = useStyles();\n\n  return (\n    <Snackbar\n      anchorOrigin={{\n        vertical: 'top',\n        horizontal: 'center'\n      }}\n      autoHideDuration={6000}\n      onClose={onClose}\n      open={open}\n    >\n      <SnackbarContent\n        className={classes.content}\n        message={\n          <span className={classes.message}>\n            <CheckCircleIcon className={classes.icon} />\n            Successfully saved changes!\n          </span>\n        }\n        variant=\"h6\"\n      />\n    </Snackbar>\n  );\n};\n\nSuccessSnackbar.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired\n};\n\nSuccessSnackbar.defaultProps = {\n  open: true,\n  onClose: () => {}\n};\n\nexport default SuccessSnackbar;\n","import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  Grid,\n  Divider,\n  Switch,\n  TextField,\n  Typography,\n  colors\n} from '@material-ui/core';\n\nimport SuccessSnackbar from '../SuccessSnackbar';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  saveButton: {\n    color: theme.palette.white,\n    backgroundColor: colors.green[600],\n    '&:hover': {\n      backgroundColor: colors.green[900]\n    }\n  }\n}));\n\nconst GeneralSettings = props => {\n  const { profile, className, ...rest } = props;\n\n  const classes = useStyles();\n  const [openSnackbar, setOpenSnackbar] = useState(false);\n  const [addMoreRows, setaddMoreRows] = useState([\n    { english_Name: '', arabic_Name: '', price: '' }\n  ]);\n  const [addMoreRowsNutritional, setaddMoreRowsNutritional] = useState([\n    { english_Name: '', arabic_Name: '', price: '' }\n  ]);\n  const [addMoreRowsIngredients, setaddMoreRowsIngredients] = useState([\n    { english_Name: '', arabic_Name: '', price: '' }\n  ]);\n\n  const handleChange = event => {\n    event.persist();\n  };\n  const handelMoreRows = () => {\n    let numberofRows = addMoreRows.length;\n    setaddMoreRows(prev => [\n      ...prev,\n      { english_Name: '', arabic_Name: '', price: '' }\n    ]);\n  };\n  const handelMoreRowsIngredients = () => {\n    let numberofRows = addMoreRowsIngredients.length;\n    setaddMoreRowsIngredients(prev => [\n      ...prev,\n      { english_Name: '', arabic_Name: '', price: '' }\n    ]);\n  };\n  const handelMoreRowsNutritional = () => {\n    let numberofRows = addMoreRowsNutritional.length;\n    setaddMoreRowsNutritional(prev => [\n      ...prev,\n      { english_Name: '', arabic_Name: '', price: '' }\n    ]);\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    setOpenSnackbar(true);\n  };\n\n  const handleSnackbarClose = () => {\n    setOpenSnackbar(false);\n  };\n\n  const states = ['Alabama', 'New York', 'San Francisco'];\n\n  return (\n    <Card {...rest} className={clsx(classes.root, className)}>\n      <form onSubmit={handleSubmit}>\n        <CardHeader title=\"Profile\" />\n        <Divider />\n        <CardContent>\n          <Grid container spacing={4}>\n            {addMoreRows.map(item => {\n              return (\n                <>\n                  <Grid item md={6} xs={12}>\n                    <TextField\n                      fullWidth\n                      helperText=\"Please specify the English name\"\n                      label=\"English Name \"\n                      name=\"firstName\"\n                      onChange={handleChange}\n                      required\n                      variant=\"outlined\"\n                    />\n                  </Grid>\n                  <Grid item md={6} xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Arabic Name\"\n                      name=\"lastName\"\n                      onChange={handleChange}\n                      required\n                      variant=\"outlined\"\n                    />\n                  </Grid>\n                  <Grid item md={6} xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"price \"\n                      name=\"price\"\n                      onChange={handleChange}\n                      required\n                      variant=\"outlined\"\n                    />\n                  </Grid>\n                  <Grid item md={6} xs={12}>\n                    <Typography variant=\"h6\">\n                      Disable or Enable this modifier\n                    </Typography>\n\n                    <Switch\n                      color=\"secondary\"\n                      edge=\"start\"\n                      name=\"isPublic\"\n                      onChange={handleChange}\n                    />\n                  </Grid>\n                </>\n              );\n            })}\n\n            <Grid item md={12} xs={12}>\n              <Button\n                onClick={handelMoreRows}\n                className={classes.saveButton}\n                variant=\"contained\">\n                Add More\n              </Button>\n            </Grid>\n          </Grid>\n          <Divider\n            style={{\n              padding: '5px',\n\n              width: '100%',\n              backgroundColor: 'rgb(57, 52, 134)',\n              marginBlock: '10px'\n            }}\n          />\n          <Grid container spacing={4}>\n            {addMoreRowsNutritional.map(item => {\n              return (\n                <>\n                  <Grid item md={6} xs={12}>\n                    <TextField\n                      fullWidth\n                      helperText=\"Please specify the English name\"\n                      label=\"English Name \"\n                      name=\"firstName\"\n                      onChange={handleChange}\n                      required\n                      variant=\"outlined\"\n                    />\n                  </Grid>\n                  <Grid item md={6} xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Arabic Name\"\n                      name=\"lastName\"\n                      onChange={handleChange}\n                      required\n                      variant=\"outlined\"\n                    />\n                  </Grid>\n                  <Grid item md={6} xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"price \"\n                      name=\"price\"\n                      onChange={handleChange}\n                      required\n                      variant=\"outlined\"\n                    />\n                  </Grid>\n                  <Grid item md={6} xs={12}>\n                    <Typography variant=\"h6\">\n                      Disable or Enable this Nutritional Info\n                    </Typography>\n\n                    <Switch\n                      color=\"secondary\"\n                      edge=\"start\"\n                      name=\"isPublic\"\n                      onChange={handleChange}\n                    />\n                  </Grid>\n                </>\n              );\n            })}\n\n            <Grid item md={12} xs={12}>\n              <Button\n                onClick={handelMoreRowsNutritional}\n                className={classes.saveButton}\n                variant=\"contained\">\n                Add More Nutritional Info\n              </Button>\n            </Grid>\n          </Grid>\n          <Divider\n            style={{\n              padding: '5px',\n\n              width: '100%',\n              backgroundColor: 'rgb(57, 52, 134)',\n              marginBlock: '10px'\n            }}\n          />\n          <Grid container spacing={4}>\n            {addMoreRowsIngredients.map(item => {\n              return (\n                <>\n                  <Grid item md={6} xs={12}>\n                    <TextField\n                      fullWidth\n                      helperText=\"Please specify the English name\"\n                      label=\"English Name \"\n                      name=\"firstName\"\n                      onChange={handleChange}\n                      required\n                      variant=\"outlined\"\n                    />\n                  </Grid>\n                  <Grid item md={6} xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Arabic Name\"\n                      name=\"lastName\"\n                      onChange={handleChange}\n                      required\n                      variant=\"outlined\"\n                    />\n                  </Grid>\n                  <Grid item md={6} xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"price \"\n                      name=\"price\"\n                      onChange={handleChange}\n                      required\n                      variant=\"outlined\"\n                    />\n                  </Grid>\n                  <Grid item md={6} xs={12}>\n                    <Typography variant=\"h6\">\n                      Disable or Enable this Ingredients Info\n                    </Typography>\n\n                    <Switch\n                      color=\"secondary\"\n                      edge=\"start\"\n                      name=\"isPublic\"\n                      onChange={handleChange}\n                    />\n                  </Grid>\n                </>\n              );\n            })}\n\n            <Grid item md={12} xs={12}>\n              <Button\n                onClick={handelMoreRowsIngredients}\n                className={classes.saveButton}\n                variant=\"contained\">\n                Add More Ingredients Info\n              </Button>\n            </Grid>\n          </Grid>\n        </CardContent>\n        <Divider />\n        <CardActions>\n          <Button className={classes.saveButton} variant=\"contained\">\n            create\n          </Button>\n        </CardActions>\n      </form>\n      <SuccessSnackbar onClose={handleSnackbarClose} open={openSnackbar} />\n    </Card>\n  );\n};\n\nGeneralSettings.propTypes = {\n  className: PropTypes.string,\n  profile: PropTypes.object.isRequired\n};\n\nexport default GeneralSettings;\n","import React, { useState, useEffect } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/styles';\nimport { Grid } from '@material-ui/core';\n\nimport axios from 'utils/axios';\nimport { ProfileDetails, GeneralSettings } from './components';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst General = props => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n  const [profile, setProfile] = useState(null);\n\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchProfile = () => {\n      axios.get('/api/account/profile').then(response => {\n        if (mounted) {\n          setProfile(response.data.profile);\n        }\n      });\n    };\n\n    fetchProfile();\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  if (!profile) {\n    return null;\n  }\n\n  return (\n    <Grid\n      {...rest}\n      className={clsx(classes.root, className)}\n      container\n      spacing={3}>\n      <Grid item lg={12} md={12} xl={12} xs={12}>\n        <GeneralSettings profile={profile} />\n      </Grid>\n    </Grid>\n  );\n};\n\nGeneral.propTypes = {\n  className: PropTypes.string\n};\n\nexport default General;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport { General, Modifiers } from './components';\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}>\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography component={'span'}>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    'aria-controls': `simple-tabpanel-${index}`\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper\r\n  }\r\n}));\r\n\r\nexport default function SimpleTabs() {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          aria-label=\"simple tabs example\">\r\n          <Tab label=\" Product Info\" {...a11yProps(0)} />\r\n          <Tab label=\" Modifiers\" {...a11yProps(1)} />\r\n        </Tabs>\r\n      </AppBar>\r\n      <TabPanel value={value} index={0}>\r\n        <General />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        <Modifiers />\r\n      </TabPanel>\r\n    \r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { Button } from '@material-ui/core';\n\nimport { Page } from 'components';\nimport {\n  AboutAuthor,\n  AboutProject,\n  Preferences,\n  ProjectCover,\n  ProjectDetails\n} from './components';\nimport { Header, General } from './components';\nimport SimpleTabs from './Tabs';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: theme.breakpoints.values.lg,\n    maxWidth: '100%',\n    margin: '0 auto',\n    padding: theme.spacing(3, 3, 6, 3)\n  },\n  aboutAuthor: {\n    marginTop: theme.spacing(3)\n  },\n  aboutProject: {\n    marginTop: theme.spacing(3)\n  },\n  projectCover: {\n    marginTop: theme.spacing(3)\n  },\n  projectDetails: {\n    marginTop: theme.spacing(3)\n  },\n  preferences: {\n    marginTop: theme.spacing(3)\n  },\n  actions: {\n    marginTop: theme.spacing(3)\n  }\n}));\n\nconst ProjectCreate = () => {\n  const classes = useStyles();\n  const [values, setValues] = useState({\n    English_Name: '',\n    Arabic_Name: '',\n    Category: '',\n    English_Description: '',\n    Arabic_Description: '',\n\n    English_Note: '',\n    Arabic_Note: '',\n    isPublic: '',\n    canHire: ''\n  });\n  return (\n    <Page className={classes.root} title=\"Product Createe\">\n      <Header />\n\n      <SimpleTabs setValues={setValues} values={values} />\n      <div className={classes.actions}></div>\n    </Page>\n  );\n};\n\nexport default ProjectCreate;\n"],"sourceRoot":""}